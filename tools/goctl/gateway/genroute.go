package gateway

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"

	"github.com/micro-easy/go-zero/tools/goctl/api/util"
	"github.com/micro-easy/go-zero/tools/goctl/gateway/descriptor"
	ctlutil "github.com/micro-easy/go-zero/tools/goctl/util"
)

const (
	routesFilename = "routes.go"
	routesTemplate = `// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"
	"github.com/micro-easy/go-zero/rest"

	{{.ImportPackages}}
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{{- range $meth := .Meths}}
			{{- range $b := $meth.Bindings}}
			{
				Method: {{getHttpMethod $b.HTTPMethod}},
				Path:{{replacePath $b.PathTmpl.Template | printf "%q"}},
				Handler:{{$b.Method.GetName}}V{{$b.Index}}Handler(serverCtx),
			},
			{{end -}}
			{{end -}}
		}...
	)
}
`
)

var mapping = map[string]string{
	"delete": "http.MethodDelete",
	"get":    "http.MethodGet",
	"head":   "http.MethodHead",
	"post":   "http.MethodPost",
	"put":    "http.MethodPut",
	"patch":  "http.MethodPatch",
}

func getHttpMethod(method string) string {
	return mapping[strings.ToLower(method)]
}

func replacePath(path string) string {
	var builder strings.Builder
	for _, r := range path {
		if r == '}' {
			continue
		} else if r == '{' {
			r = ':'
		}
		builder.WriteRune(r)
	}
	return builder.String()
}

func (g *GatewayGenerator) genRoutes(dir, pbImportPath string, meths []*descriptor.MethodWithBindings) error {
	fp, created, err := util.MaybeCreateFile(dir, handlerDir, routesFilename)
	if err != nil {
		return err
	}
	if !created {
		return nil
	}
	defer fp.Close()

	parentPkg, err := getParentPackage(dir)
	if err != nil {
		return err
	}

	funcMap := template.FuncMap{
		"getHttpMethod": getHttpMethod,
		"replacePath":   replacePath,
	}

	text, err := ctlutil.LoadTemplate(category, routesTemplateFile, routesTemplate)
	if err != nil {
		return err
	}

	buffer := new(bytes.Buffer)
	err = template.Must(template.New("routesTemplate").Funcs(funcMap).Parse(text)).Execute(buffer,
		map[string]interface{}{
			"ImportPackages": genRoutesImports(parentPkg, pbImportPath),
			"Meths":          meths,
		})
	if err != nil {
		return err
	}

	formatCode := formatCode(buffer.String())
	_, err = fp.WriteString(formatCode)
	if err != nil {
		return err
	}
	return nil
}

func genRoutesImports(parentPkg, pbImportPath string) string {
	var imports []string
	//	imports = append(imports, `"context"`+"\n")
	imports = append(imports, fmt.Sprintf("\"%s\"", ctlutil.JoinPackages(parentPkg, contextDir)))
	//	imports = append(imports, fmt.Sprintf("\"%s\"\n", pbImportPath))

	//	imports = append(imports, fmt.Sprintf("\"%s/core/logx\"", vars.ProjectOpenSourceUrl))
	return strings.Join(imports, "\n\t")
}
